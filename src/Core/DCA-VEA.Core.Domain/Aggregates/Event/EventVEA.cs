using DCA_VEA.Core.Domain.Aggregates.Event;
using DCA_VEA.Core.Domain.Common.Bases;
using DCA_VEA.Core.Domain.Common.Values;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.CompilerServices;
using System.Text;
using System.Threading.Tasks;

[assembly: InternalsVisibleTo("xUnitTests")]


namespace DCA_VEA.Core.Domain.Aggregates.Events
{
    internal class EventVEA : AggregateRoot<EventVEAId>
    {
        public EventVEAId Id { get; private set; }
        private EventVEATitle Title;
        private EventVEADescription Description;
        private TimeInterval Date;
        private bool IsPrivate;
        private int MaxGuests;
        private EventVEAStatus Status;

        // Constructor
        private EventVEA(EventVEAId id, EventVEATitle title, EventVEADescription description, TimeInterval date, bool isPrivate, int maxGuests, EventVEAStatus status)
        {
            Id = id;
            Title = title;
            Description = description;
            Date = date;
            IsPrivate = isPrivate;
            MaxGuests = maxGuests;
            Status = status;
        }

        // Factory method for creating an "empty" EventVEA
        public static EventVEA CreateEmpty()
        {
            // Since Id is auto-generated by EF, no need to set it here.
            return new EventVEA(null, EventVEATitle.Create(""), EventVEADescription.Create(""), TimeInterval.Create(DateTime.MinValue, DateTime.MinValue), true, 5, EventVEAStatus.Draft);
        }

        // Method to set the title
        public void UpdateTitle(string title)
        {
            Title = EventVEATitle.Create(title);
        }
    }
}
